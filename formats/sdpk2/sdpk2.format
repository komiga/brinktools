
// SDPK2 archive format (aka PARS)

// Overview
//	1. SDPK2 format
//		a. Layout

// *****************************
// 1. SDPK2 format
//	SDPK2 is an archive format for BRINK. Each archive has an accompanying SDMD2 (entry info) file.
//	Sources:
//		http://svn.gib.me/public/brink  (Gibbed)

// 1.a. Layout
//	Header (up to layout.entries) is 32 bytes.
layout {
	const rdata<4, 0x00> header="PARS"		// File header
	short version							// Format version; always 1; src: Gibbed
	short _unk								// TODO: Unknown; always 4
	rdata<4, 0x20> comp_method				// Compression method; "zlib" for PC, "lzx " (space at end) for PS3
	uint header_size						// Size of header / offset to first entry data
	uint entry_size							// Size of entries in the header (should be 30 bytes)
	uint entry_count						// Number of entries
	uint block_size							// Size of data blocks (should be 65536); src: Gibbed
	uint block_block_size					// TODO: Unknown (should be 2); src: Gibbed
	Entry entries[entry_count]				// File info
	ushort comp_block_sizes[entry_count]	// Compressed block sizes; src: Gibbed
}

// 1.XXX. uint40
//	40-bit uint; src: Gibbed
define uint40 {
	real ulong value
	operation in {
		value=byte.in()<<32; // 8 bits
		value|=int.in(); // 32 bits
	}
}

// 1.XXX. MD5Hash
//	Plain-data MD5 hash.
define MD5Hash {
	char data[16]						// Hash data
}

// 1.XXX. Entry
//	 Mostly from Gibbed.
define Entry {
	MD5Hash hash						// Hash of the entry's entire path (starts with "/")
	uint blocksize_index				// Index in layout.comp_block_sizes for the file
	uint40 size							// The uncompressed size of the file's data
	uint40 offset						// The offset to the file's data
}

